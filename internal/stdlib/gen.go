//go:build ignore
// +build ignore

package main

import (
	"flag"
	"fmt"
	"log"
	"os"
	"os/exec"
	"path"
	"runtime"
	"strings"
)

const template = `// Automatically generated by go generate. DO NOT EDIT

package stdlib

var stdlibPackagesMap = %#v
`

func main() {
	output := flag.String("output", "data.go", "output file")
	flag.Parse()

	gosrc := path.Join(runtime.GOROOT(), "src")

	pkgsMap := map[string]struct{}{}
	cmd := exec.Command("find", gosrc, "-type", "d", "-mindepth", "1")
	o, err := cmd.Output()
	if err != nil {
		log.Fatal(err)
	}
	for _, pkg := range strings.Fields(string(o)) {
		pkg = strings.TrimPrefix(pkg, gosrc)
		pkg = strings.TrimPrefix(pkg, "/")
		if pkg == "vendor" ||
			strings.HasPrefix(pkg, "vendor/") ||
			strings.Contains(pkg, "/vendor/") {
			continue
		}
		pkgsMap[pkg] = struct{}{}
	}

	f, err := os.Create(*output)
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()
	fmt.Fprintf(f, template, pkgsMap)
}
